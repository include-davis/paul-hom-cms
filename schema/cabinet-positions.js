const { ContentType, FieldType } = require('@include/hearth');

/**
 * NOTES PART 0: OVERVIEW
 * Hi, you don't need to mess with too much. You basically just need to redefine the schema and you're good to go lol.
 * You can just run npm run dev to develop. Npm run build if you want to check if the CMS can build. You'll need to register an account
 * when you first create a new CMS instance. If there are no existing users, then the /register page will work. If you navigate there manually,
 * you'll be allowed to make the admin account. Once users exist, then registration is not allowed (at least from the frontend).
 * 
 * 
 * NOTES PART 1: CALLBACK FUNCTIONS
 * callbacks.js is where we define the function to call whenever a user performs 
 * some update such as create, edit, delete on content/media
 * 
 * NOTES PART 2: DATABASE MIGRATIONS
 * Usually in projects, we will commit and push our database migrations. However, 
 * since our migrations are autogenerated from this schema here, it might not be the best
 * idea to commit/push them up. It doesn't really matter though. If the deployment environment is behind,
 * it'll just autogenerate migrations and run them before building. Sort of confusing, but you can just gitignore migrations or smth.
 * 
 * Make sure you keep the first two migrations however, just leave out any auto-generated migrations. 
 * To generate migrations, just run npm run dev, npm run build, or npm run start. This will auto-generate migrations
 * and run them :). If you need the auto-migration to delete collections, you'll need to run hearth dev -d. The -d means with delete.
 * Otherwise, if the schema thinks we need to delete something to sync the db to the schema, it will just ignore deleting collections.
 * 
 * NOTES PART 3: SCHEMA DEFINITION
 * Besides the notes below, just note that FieldType.BOOLEAN is not supported rn. Just use SHORT_TEXT, LONG_TEXT, MEDIA_LIST.
 * If you need just one image or pdf, just use a list and take the first item or smth.
 * 
 * You can't upload anything greater than 10mb btw. If video, just embed a youtube embed and store the link.
 */

// Each content-type needs its own file that has this format (comments removed ofc). The name of the file doesn't really matter
// but just keep it the same as the content type name for consistency.
const cabinetPositions = new ContentType({
  // name should be kebab-case, this is what the mongodb collection name will be
  name: 'cabinet-position',
  // Display names are for the CMS UI, not super neccesary, but helpful for clients to not have to see ugly names
  // If no singularDisplayName is provided, it will default to the name's value. If no pluralDisplayName is provided, 
  // it defaults to singularDisplayName
  singularDisplayName: 'Cabinet Position',
  pluralDisplayName: 'Cabinet Positions',
});

cabinetPositions
  .createField({
    // the name field is the field name created in mongodb for this collection. Probably use underscores instead of spaces.
    // example: field_name_with_spaces
    name: 'title',
    // displayname is same idea as above.
    displayName: 'Title',
    // Dates are sort of iffy rn, but they mostly work I think. To be safe let's just store dates as strings. like MM-DD-YEAR
    type: FieldType.SHORT_TEXT,
    // required is false by default
    required: true,
  })
  .createField({
    name: 'description',
    displayName: 'Description',
    type: FieldType.LONG_TEXT,
    required: true,
  })
  .createField({
    name: 'order',
    displayName: 'Display Order',
    type: FieldType.SHORT_TEXT,
    required: true,
  });

module.exports = cabinetPositions;
